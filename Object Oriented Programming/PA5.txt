useArray.h
/*********************************************************
 * Summary: This header file defines the method prototypes
 *          for use in the `useArray.cpp` file. It includes
 *          the necessary declarations for working with
 *          arrays and handling basic array operations such as
 *          filling, printing, duplicate checking, and sorting.
 *
 *********************************************************/

// If not already defined, define the USEARRAY_H header
// Includes array for array-based operations
#ifndef USEARRAY_H 
#define USEARRAY_H
#include <array> 

// Defining the constant size of the array (100 elements max)
const int MAX_SIZE = 100;

// Prototype for the method that returns the number of elements
// to be generated by asking the user for input
int howMany();

// Prototype for the method that fills the array with random values
// between 0 and 9999. Takes the array and number of elements as parameters
void fillArray(std::array<int, MAX_SIZE> &arr, int &);

// Prototype for the method that prints the array contents, displaying
// the elements 10 numbers per row. Takes the array and length as parameters
void printArray(std::array<int, MAX_SIZE> &, int &);

// Prototype for the method that checks the array for duplicate values.
// Returns `false` if duplicates are found, `true` otherwise.
// Takes the array and length as parameters
bool dupeCheck(std::array<int, MAX_SIZE> &arr, int &);

// Prototype for the method that sorts the array in ascending order.
// Uses a comparison-based sorting algorithm to swap elements if needed
// Takes the array and length as parameters
void sortArray(std::array<int, MAX_SIZE> &, int &);

#endif // End of the USEARRAY_H definition

useArray.cpp
/*********************************************************
 * Summary: This file provides the implementation of functions
 *          related to generating, processing, and displaying
 *          an array of random integers. It also includes methods
 *          for duplicate checking and sorting.
 *
 * 1: The howMany() method prompts the user to input how many numbers
 *    to generate. It ensures the input is between 1 and 100, throwing
 *    an exception if it is outside this range.
 * 2: The fillArray() method fills an array with random integers
 *    within the range [0, 9999].
 * 3: The printArray() method displays the elements of the array in
 *    rows of 10.
 * 4: The dupeCheck() method checks for duplicates in the array and
 *    returns false if duplicates are found, otherwise returns true.
 * 5: The sortArray() method sorts the array in ascending order using
 *    a basic comparison-based sorting algorithm .
 *
 * Author: Yaseer Sabir
 * Created: October 2, 2024
 * Summary of Modifications [if applicable]:
 *      2 Oct 2024 - implemented howMany method
 *      2 Oct 2024 - fixing error in howMany()
 *      2 Oct 2024 - removed recursion-tweak
 *      3 Oct 2024 - removed extra string statement and shortened for loop
 *      3 Oct 2024 - trying to see issue with howMany()
 *      3 Oct 2024 - removed try catch to fix howMany()
 *      3 Oct 2024 - implemented fillArray
 *      4 Oct 2024 - fixing printArray
 *      4 Oct 2024 - implemented dupeCheck
 *      4 Oct 2024 - first try on sortArray()
 *********************************************************/

#include "useArray.h"
#include <array>
#include <iostream>
#include <cmath>
#include <ctime>
#include <random>

// Prompts the user to input how many random numbers to generate.
// Ensures the input is between 1 and 100, throwing an exception if not.
int howMany()
{
    int nums;
    std::cout << "Please enter how many numbers to generate (no more than 100): ";
    std::cin >> nums;
    if (nums > 100 || nums < 1)
        throw "The input does not meet the requirements"; // Error for invalid input
    else
        return nums; // Return valid input
}

// Fills an array with random integers between 0 and 9999.
// Seeds the random generator using the current time.
void fillArray(std::array<int, MAX_SIZE> &arr, int &randNums)
{
    std::srand((size_t)(std::time(0))); // Seeding the random number generator

    if (randNums > 1 && randNums < 100)
    {
        for (int i = 0; i < randNums; i++)
        {
            arr[i] = 0 + (std::rand() % (9999 - 0 + 1)); // Generating random values
        }
    }
}

// Prints the contents of the array in rows of 10 elements each.
void printArray(std::array<int, MAX_SIZE> &arr, int &length)
{
    int counter = 0;
    for (int i = 0; i < length; i++)
    {
        std::cout << arr[i] << " "; // Print each array element
        counter++;
        if (counter % 10 == 0)
        {
            std::cout << std::endl; // Newline every 10 elements for formatting
        }
    }
}

// Checks for duplicates in the array.
// Returns false if any duplicates are found; true otherwise.
bool dupeCheck(std::array<int, MAX_SIZE> &arr, int &length)
{
    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length - 1; j++)
        {
            if (arr[i] == arr[j])
            {
                return false; // Duplicate found
            }
        }
    }
    return true; // No duplicates found
}

// Sorts the array in ascending order using a basic sorting algorithm.
void sortArray(std::array<int, MAX_SIZE> &arr, int &length)
{
    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            if (arr[j] < arr[i])
            {
                // Swap elements if out of order
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}


printStars.h
/*********************************************************
 * Summary: This header file declares methods for generating, scaling,
 *          and processing random numbers, as well as printing formatted
 *          stars based on user input.
 * 1: The getNumberRange() method prompts the user for an unsigned int range
 *    and returns it. Throws an exception if the input is zero.
 * 2: The getNumberSize() method prompts the user for the number of random
 *    numbers to generate, ensuring it is between 1 and 100.
 * 3: The genRandomNumber() method generates and returns a random number
 *    between 0 and the user-specified upper limit.
 * 4: The scaleNumber() method scales the generated number by subtracting
 *    half the range, adjusting further if the result is zero.
 * 5: The fillVector() method populates a vector with scaled random numbers
 *    based on the specified range and number of elements.
 * 6: The printStars() method takes a vector and prints stars in a conditioned manner.
 *********************************************************/

#include <iostream>
#include <cstddef>
#include <vector>

// Prompts the user to enter an unsigned int range and returns the value.
// Throws an exception if the input is zero.
size_t getNumberRange();

// Prompts the user to input how many random numbers to generate, with a limit of 100.
// Ensures the value is within the range [1, 100].
size_t getNumberSize();

// Generates and returns a random number between 0 and the specified upper limit.
size_t genRandomNumber(size_t &);

// Scales the generated number by subtracting half of the specified range.
// If the result is zero, adjusts it using another random number.
int scaleNumber(size_t &, size_t &);

// Populates the provided vector with scaled random numbers based on the
// specified range and number of elements to generate.
void fillVector(std::vector<int> &, size_t &, size_t &);

// Takes a vector of numbers and prints stars in the conditioned manner.
void printStars(std::vector<int> &);

printStars.cpp
/*********************************************************
 * Summary: This file includes the implementation for the printStars.h file
 *
 * 1: The getNumberRange() method prompts the user for an unsigned int range
 *    and throws an exception if the input is zero.
 * 2: The getNumberSize() method prompts the user for the number of random
 *    numbers to generate, ensuring the value is between 1 and 100, inclusive.
 * 3: The genRandomNumber() method generates a random number between 0 and the
 *    specified upper limit (inclusive).
 * 4: The scaleNumber() method scales the generated random number by subtracting
 *    half the range, and if the result is zero, adjusts it further using a new
 *    random number.
 * 5: The fillVector() method populates a vector with scaled random numbers.
 * 6: The printStars() method takes a vector and prints a number of stars
 *    according to the value at the user-specified index. Positive values print
 *    stars horizontally, and negative values print stars vertically.
 *
 * Author: Yaseer Sabir
 * Created: October 4, 2024
 * Summary of Modifications [if applicable]:
 *      4 Oct 2024 - implemented getNumberRange
 *      4 Oct 2024 - implemented getNumberSize
 *      5 Oct 2024 - fixed condition for numsize
 *      5 Oct 2024 - implemented scaleNum
 *      6 Oct 2024 - implemented fillVector
 *      6 Oct 2024 - first try on printStars
 *      7 Oct 2024 - tweaking printStars method
 *      7 Oct 2024 - commented classes
 ********************************************************/

/*including printStars header file, random for random number generation,
 ctime to seed with current time, and cmath for abs function */
#include "printStars.h"
#include <random>
#include <ctime>
#include <cmath>

// Prompts the user for an unsigned int range. If the user inputs 0, throws an exception.
size_t getNumberRange()
{
    size_t num = 1;

    std::cout << "Please enter an unsigned int range";
    std::cin >> num;
    if (num == 0)
        throw "The input does not meet the requirements";
    else
        return num;
}

// Prompts the user for how many random numbers to generate (up to 100).
// Throws an exception if the number is outside the range [1, 100].
size_t getNumberSize()
{
    size_t size = 1;

    std::cout << "Please enter how many numbers to generate (no more than 100)";
    std::cin >> size;
    if (size > 100 || size < 1)
        throw "The input does not meet the requirements";
    else
        return size;
}

// Generates and returns a random number between 0 and the user-defined upper limit.
size_t genRandomNumber(size_t &randNum)
{
    std::srand(size_t(std::time(0)));                  // Seeds with the current time
    size_t random = (std::rand() % (randNum - 0 + 1)); // Generates random value
    return random;
}

// Scales the generated number by subtracting half of the range. If the result is zero,
// it subtracts another random number to ensure it's non-zero.
int scaleNumber(size_t &genNum, size_t &Num)
{
    int origNum = genNum;
    genNum -= (Num / 2); // Scale by subtracting half the range

    if (genNum == 0)
    {
        origNum -= (genRandomNumber(Num)); // Adjust if zero
        genNum = origNum;
    }
    return genNum;
}

// Populates the provided vector with randomly generated and scaled numbers
// based on the specified range and number of elements.
void fillVector(std::vector<int> &vector, size_t &numberRange, size_t &numberSize)
{
    for (size_t i = 0; i < numberSize; i++)
    {
        size_t random = genRandomNumber(numberRange);     // Generate a random number
        int scaledNum = scaleNumber(random, numberRange); // Scale the number

        vector.push_back(scaledNum); // Add scaled number to vector
    }
}

// Takes a vector and prompts the user for an index to display stars.
void printStars(std::vector<int> &vector)
{
    int number;
    std::cin >> number; // User inputs an index

    if (number < 0 || number >= vector.size())
    {
        std::cout << "Index out of bounds!" << std::endl; // Error check for valid index
        return;
    }

    // If the number at the index is positive, print stars horizontally
    if (vector.at(number) > 0)
    {
        for (int i = 0; i < vector.at(number); i++)
        {
            if (i != (vector.at(number) - 1))
                std::cout << " " << "*";
            else
                std::cout << " " << "*" << " " << std::endl;
        }
    }

    // If the number at the index is negative, print stars vertically
    else if (vector.at(number) < 0)
    {
        for (int i = 0; i < std::abs(vector.at(number)) + 1; i++)
        {
            if (i != std::abs(vector.at(number)))
                std::cout << "*" << " ";
            else
                std::cout << "*" << std::endl;
        }
    }
}

main.cpp
/*
*******************************************************
Name      :  Yaseer Sabir
Class     :  CSC 2312 Section 004
PA#       :  PA4  Arrays and Vectors
Due Date  :  11/10/2024
*******************************************************
*/
#include "useArray.h"
#include "printStars.h"
#include <iostream>

int main()
{
    // useArray class
    int numberOfElements;
    try
    {
        numberOfElements = howMany();
        std::cout << "You entered: " << numberOfElements << " elements" << std::endl;
    }
    catch (const char *msg)
    {
        std::cout << msg << std::endl;
    }

    std::array<int, MAX_SIZE> arr1 = {2, 1, 3, 2, 4};
    std::array<int, MAX_SIZE> arr2;

    fillArray(arr2, numberOfElements);

    printArray(arr2, numberOfElements);

    std::cout << std::endl;

    if (dupeCheck(arr1, numberOfElements))
        std::cout << "No Duplicates" << std::endl;
    else
        std::cout << "Duplicate exists" << std::endl;

    sortArray(arr1, numberOfElements);
    printArray(arr1, numberOfElements);

    std::cout << std::endl;

    // printStars class
    size_t numberRange;
    try
    {
        numberRange = getNumberRange();
        std::cout << "The range of values is" << numberRange << std::endl;
    }
    catch (const char *msg)
    {
        std::cout << msg << std::endl;
    }

    size_t numberSize;
    try
    {
        numberSize = getNumberSize();
        std::cout << "The range of random values is " << numberRange << std::endl;
    }
    catch (const char *msg)
    {
        std::cout << msg << std::endl;
    }

    size_t randomNumber = genRandomNumber(numberSize);

    std::cout << "Scaled Number is " << scaleNumber(numberSize, randomNumber);

    std::vector<int> vec1 = {1, 2, 3, 4, 5, 6, 7};

    size_t range = getNumberRange();
    size_t size = getNumberSize();
    fillVector(vec1, range, size);

    printStars(vec1);

    return 0;
}
